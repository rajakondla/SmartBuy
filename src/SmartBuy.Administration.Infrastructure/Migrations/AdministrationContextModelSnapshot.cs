// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartBuy.Administration.Infrastructure;

namespace SmartBuy.Administration.Infrastructure.Migrations
{
    [DbContext(typeof(AdministrationContext))]
    partial class AdministrationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Administrator")
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartBuy.Administration.Domain.GasStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("GasStations");
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.GasStationSchedule", b =>
                {
                    b.Property<Guid>("GasStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("int");

                    b.HasIndex("GasStationId");

                    b.ToTable("GasStationSchedules");
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.GasStationScheduleByDay", b =>
                {
                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid>("GasStationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("GasStationId");

                    b.ToTable("GasStationScheduleByDays");
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.GasStationScheduleByTime", b =>
                {
                    b.Property<Guid>("GasStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("TimeInteral")
                        .HasColumnType("time");

                    b.HasIndex("GasStationId");

                    b.ToTable("GasStationScheduleByTimes");
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.GasStationTankSchedule", b =>
                {
                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TankId")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasIndex("TankId");

                    b.ToTable("GasStationTankSchedule");
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.OrderStrategy", b =>
                {
                    b.Property<Guid>("GasStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.HasIndex("GasStationId");

                    b.ToTable("OrderStrategies");
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.Tank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EstimatedDaySale")
                        .HasColumnType("int");

                    b.Property<Guid>("GasStationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GasStationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Tanks");
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.TankReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TankId");

                    b.ToTable("TankReadings");
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.TankSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TankId");

                    b.ToTable("TankSales");
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.GasStationSchedule", b =>
                {
                    b.HasOne("SmartBuy.Administration.Domain.GasStation", null)
                        .WithMany()
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.GasStationScheduleByDay", b =>
                {
                    b.HasOne("SmartBuy.Administration.Domain.GasStation", null)
                        .WithMany()
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.GasStationScheduleByTime", b =>
                {
                    b.HasOne("SmartBuy.Administration.Domain.GasStation", null)
                        .WithMany()
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.GasStationTankSchedule", b =>
                {
                    b.HasOne("SmartBuy.Administration.Domain.Tank", null)
                        .WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.OrderStrategy", b =>
                {
                    b.HasOne("SmartBuy.Administration.Domain.GasStation", null)
                        .WithMany()
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.Tank", b =>
                {
                    b.HasOne("SmartBuy.Administration.Domain.GasStation", null)
                        .WithMany("Tanks")
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartBuy.Administration.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartBuy.SharedKernel.ValueObjects.Measurement", "Measurement", b1 =>
                        {
                            b1.Property<int>("TankId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("Bottom")
                                .HasColumnName("Bottom")
                                .HasColumnType("int");

                            b1.Property<int>("NetQuantity")
                                .HasColumnName("NetQuantity")
                                .HasColumnType("int");

                            b1.Property<int>("Quantity")
                                .HasColumnName("Quantity")
                                .HasColumnType("int");

                            b1.Property<int>("Top")
                                .HasColumnName("Top")
                                .HasColumnType("int");

                            b1.Property<int>("Unit")
                                .HasColumnName("Unit")
                                .HasColumnType("int");

                            b1.HasKey("TankId");

                            b1.ToTable("Tanks");

                            b1.WithOwner()
                                .HasForeignKey("TankId");
                        });
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.TankReading", b =>
                {
                    b.HasOne("SmartBuy.Administration.Domain.Tank", null)
                        .WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBuy.Administration.Domain.TankSale", b =>
                {
                    b.HasOne("SmartBuy.Administration.Domain.Tank", null)
                        .WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
